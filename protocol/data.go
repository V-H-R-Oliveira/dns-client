package protocol

import "net"

// https://datatracker.ietf.org/doc/html/rfc1035

type DNSHeader struct {
	ID      uint16 `json:"id"`        // an unsigned 16 bit integer containing the transaction id generated by the software who made the request.
	Flags   uint16 `json:"-"`         // an unsigned 16 bit integer containing various service flags that are communicated between the DNS client and the DNS server.
	QDCount uint16 `json:"questions"` // an unsigned 16 bit integer specifying the number of entries in the question section.
	ANCount uint16 `json:"answers"`   // an unsigned 16 bit integer specifying the number of resource records in the answer section.
	NSCount uint16 `json:"-"`         // an unsigned 16 bit integer specifying the number of name server resource records in the authority records section.
	ARCount uint16 `json:"-"`         // an unsigned 16 bit integer specifying the number of resource records in the additional records section.
}

type DNSQuestion struct {
	QuestionName  []byte // Encoded domain using the RFC 1035 instructions
	QuestionType  uint16 // QTYPE field of RFC 1035
	QuestionClass uint16 // QCLASS field of RFC 1035, default = 1
}

type DNSQuery struct {
	Header   *DNSHeader
	Question *DNSQuestion
}

type DNSResource struct {
	Name   string `json:"domain"`
	Type   uint16 `json:"type"`
	Class  uint16 `json:"class"`
	TTL    uint32 `json:"ttl"`
	Length uint16 `json:"length"`
	Data   net.IP `json:"ip"`
}

type DNSResponse struct {
	Header  *DNSHeader     `json:"header"`
	Answers []*DNSResource `json:"data"`
}

const (
	RESPONSE     = 1 << 15 // Request = 0, Response = 1
	OPERATION    = 1<<14 | 1<<13 | 1<<12 | 1<<11
	AUTHANSWER   = 1 << 10
	TRUNCATION   = 1 << 9
	RECDISERED   = 1 << 8
	RECAVAILABLE = 1 << 7
	RETCODE      = 1 << 0
	SERVERSTATUS = (1 << 12) & ^0xff
	A            = 1
	NS           = 2
	CNAME        = 5
	PTR          = 12
	QCLASS       = 1
)
